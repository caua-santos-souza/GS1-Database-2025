drop table usuarios cascade constraints
drop table alertas cascade constraints
drop table usuario_alertas cascade constraints

CREATE TABLE usuarios (
    id_usuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    senha VARCHAR2(100) NOT NULL,
    cidade VARCHAR2(100) NOT NULL
);

CREATE TABLE alertas (
    id_alerta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipo VARCHAR2(50) NOT NULL CHECK (tipo IN ('chuva', 'vento', 'calor')),
    descricao VARCHAR2(255) NOT NULL,
    cidade VARCHAR2(100) NOT NULL,
    data_alerta TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE usuario_alertas (
    id_usuario_alerta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuario_id NUMBER NOT NULL,
    alerta_id NUMBER NOT NULL,
    visualizado CHAR(1) DEFAULT 'N' CHECK (visualizado IN ('S', 'N')),
    CONSTRAINT fk_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id_usuario),
    CONSTRAINT fk_alerta FOREIGN KEY (alerta_id) REFERENCES alertas(id_alerta)
);

-- Inserção de usuários
INSERT INTO usuarios (nome, email, senha, cidade)
VALUES ('João Silva', 'joao@gmail.com', 'senha123', 'São Paulo');

INSERT INTO usuarios (nome, email, senha, cidade)
VALUES ('Carlos Mendes', 'carlos@gmail.com', 'carlos123', 'São Paulo');


INSERT INTO usuarios (nome, email, senha, cidade)
VALUES ('Maria Oliveira', 'maria@gmail.com', '123maria', 'Rio de Janeiro');

INSERT INTO usuarios (nome, email, senha, cidade)
VALUES ('Pedro Santos', 'pedro@gmail.com', 'abc456', 'Curitiba');

INSERT INTO usuarios (nome, email, senha, cidade)
VALUES ('Ana Paula', 'ana@gmail.com', 'anap123', 'Recife');

INSERT INTO usuarios (nome, email, senha, cidade)
VALUES ('Lucas Rocha', 'lucas@gmail.com', 'lucas@321', 'Porto Alegre');


-- Inserção de alertas
INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('chuva', 'Chuva forte prevista', 'São Paulo', SYSTIMESTAMP);

INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('chuva', 'Chuva forte prevista', 'São Paulo', SYSTIMESTAMP);

INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('vento', 'Vento moderado', 'São Paulo', SYSTIMESTAMP);

INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('calor', 'Calor intenso esperado', 'São Paulo', SYSTIMESTAMP);

INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('vento', 'Rajadas de vento de até 90km/h', 'Rio de Janeiro', SYSTIMESTAMP);

INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('calor', 'Onda de calor prevista', 'Recife', SYSTIMESTAMP);

INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('chuva', 'Pancadas leves ao fim do dia', 'Curitiba', SYSTIMESTAMP);

INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('vento', 'Ventania intensa no litoral', 'Porto Alegre', SYSTIMESTAMP);

INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('chuva', 'Chuva moderada prevista', 'São Paulo', SYSTIMESTAMP);

INSERT INTO alertas (tipo, descricao, cidade, data_alerta)
VALUES ('vento', 'Vento fraco', 'Rio de Janeiro', SYSTIMESTAMP);


-- Inserção de usuário_alerta
INSERT INTO usuario_alertas (usuario_id, alerta_id, visualizado)
VALUES (1, 1, 'N');

INSERT INTO usuario_alertas (usuario_id, alerta_id, visualizado)
VALUES (2, 2, 'S');

INSERT INTO usuario_alertas (usuario_id, alerta_id, visualizado)
VALUES (3, 4, 'N');

INSERT INTO usuario_alertas (usuario_id, alerta_id, visualizado)
VALUES (4, 3, 'S');

INSERT INTO usuario_alertas (usuario_id, alerta_id, visualizado)
VALUES (5, 5, 'N');

--inserts para relatorio:
INSERT INTO usuario_alertas (usuario_id, alerta_id, visualizado)
VALUES (6, (SELECT MAX(id_alerta) FROM alertas WHERE tipo = 'calor' AND cidade = 'São Paulo'), 'N');

INSERT INTO usuario_alertas (usuario_id, alerta_id, visualizado)
VALUES (6, (SELECT MAX(id_alerta) FROM alertas WHERE tipo = 'vento' AND cidade = 'São Paulo'), 'N');

INSERT INTO usuario_alertas (usuario_id, alerta_id, visualizado)
VALUES (6, (SELECT MAX(id_alerta) FROM alertas WHERE tipo = 'chuva' AND cidade = 'São Paulo'), 'N');
-- Updates
UPDATE usuarios SET senha = 'novaSenha456' WHERE id_usuario = 1;
UPDATE alertas SET descricao = 'Chuva muito intensa nas próximas horas' WHERE id_alerta = 1;
UPDATE usuario_alertas SET visualizado = 'S' WHERE id_usuario_alerta = 1;
UPDATE usuarios SET cidade = 'Campinas' WHERE id_usuario = 3;
UPDATE alertas SET cidade = 'Campinas' WHERE id_alerta = 4;

-- Delete
DELETE FROM usuario_alertas WHERE id_usuario_alerta = 2;
DELETE FROM alertas WHERE id_alerta = 4;
DELETE FROM usuarios WHERE id_usuario = 5;
DELETE FROM usuario_alertas WHERE alerta_id = 3;
DELETE FROM alertas WHERE tipo = 'vento' AND cidade = 'Porto Alegre';

-- Funções para retorno de dados processados

-- Função 1: total de alertas por cidade
CREATE OR REPLACE FUNCTION total_alertas_por_cidade(p_cidade VARCHAR2)
RETURN NUMBER IS
    v_total NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_total
    FROM alertas
    WHERE UPPER(cidade) = UPPER(p_cidade); 

    RETURN v_total;
END;

-- Função 2: total de alertas não visualizados por usuario
CREATE OR REPLACE FUNCTION alertas_nao_visualizados(p_usuario_id NUMBER)
RETURN NUMBER IS
    v_qtd NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_qtd
    FROM usuario_alertas
    WHERE usuario_id = p_usuario_id AND visualizado = 'N';

    RETURN v_qtd;
END;

SET SERVEROUTPUT ON;

-- Saída das funções  1 e 2:
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total de alertas em Recife: ' || total_alertas_por_cidade('Recife'));
    DBMS_OUTPUT.PUT_LINE('Alertas não visualizados pelo usuário 1: ' || alertas_nao_visualizados(1));
END;

-- Blocos Anônimos com Consultas Complexas

-- Bloco 1:
BEGIN
    DBMS_OUTPUT.PUT_LINE('Total de alertas por cidade:');
    FOR cidade_info IN (
        SELECT cidade, COUNT(*) AS total_alertas FROM alertas
        GROUP BY cidade ORDER BY total_alertas DESC
    ) LOOP
        IF cidade_info.total_alertas > 3 THEN
            DBMS_OUTPUT.PUT_LINE('Cidade: ' || cidade_info.cidade || ' | ALERTAS: ' || cidade_info.total_alertas || ' (Nível ALTO)');
        ELSIF cidade_info.total_alertas BETWEEN 2 AND 3 THEN
            DBMS_OUTPUT.PUT_LINE('Cidade: ' || cidade_info.cidade || ' | ALERTAS: ' || cidade_info.total_alertas || ' (Nível MODERADO)');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Cidade: ' || cidade_info.cidade || ' | ALERTAS: ' || cidade_info.total_alertas || ' (Nível BAIXO)');
        END IF;
    END LOOP;
END;

-- Bloco 2:
DECLARE
    CURSOR c_usuarios IS
        SELECT id_usuario, nome FROM usuarios ORDER BY nome;
    v_count_alertas NUMBER;
BEGIN
    FOR user_rec IN c_usuarios LOOP
        SELECT COUNT(*) INTO v_count_alertas FROM usuario_alertas
        WHERE usuario_id = user_rec.id_usuario AND visualizado = 'N';
        IF v_count_alertas > 0 THEN
            DBMS_OUTPUT.PUT_LINE('Usuário: ' || user_rec.nome || ' | Alertas não visualizados: ' || v_count_alertas);
        ELSE
            DBMS_OUTPUT.PUT_LINE('Usuário: ' || user_rec.nome || ' | Todos os alertas foram visualizados.');
        END IF;
    END LOOP;
END;

-- Cursores Explícitos

DECLARE
    CURSOR c_usuarios IS
        SELECT id_usuario, nome FROM usuarios ORDER BY nome;

    v_id_usuario usuarios.id_usuario%TYPE;
    v_nome usuarios.nome%TYPE;

    CURSOR c_alertas_nao_visualizados(p_usuario_id NUMBER) IS
        SELECT alertas.id_alerta, alertas.tipo, alertas.descricao, alertas.cidade, alertas.data_alerta
        FROM alertas
        JOIN usuario_alertas ON alertas.id_alerta = usuario_alertas.alerta_id
        WHERE usuario_alertas.usuario_id = p_usuario_id AND usuario_alertas.visualizado = 'N';

    v_id_alerta alertas.id_alerta%TYPE;
    v_tipo alertas.tipo%TYPE;
    v_descricao alertas.descricao%TYPE;
    v_cidade alertas.cidade%TYPE;
    v_data_alerta alertas.data_alerta%TYPE;

BEGIN
    OPEN c_usuarios;
    LOOP
        FETCH c_usuarios INTO v_id_usuario, v_nome;
        EXIT WHEN c_usuarios%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE('Usuário: ' || v_nome || ' (ID: ' || v_id_usuario || ')');

        OPEN c_alertas_nao_visualizados(v_id_usuario);
        LOOP
            FETCH c_alertas_nao_visualizados INTO v_id_alerta, v_tipo, v_descricao, v_cidade, v_data_alerta;
            EXIT WHEN c_alertas_nao_visualizados%NOTFOUND;

            DBMS_OUTPUT.PUT_LINE('  Alerta ID: ' || v_id_alerta || ', Tipo: ' || v_tipo || ', Descrição: ' || v_descricao || ', Cidade: ' || v_cidade || ', Data: ' || TO_CHAR(v_data_alerta, 'DD/MM/YYYY HH24:MI:SS'));
        END LOOP;
        CLOSE c_alertas_nao_visualizados;

        DBMS_OUTPUT.PUT_LINE('-----------------------------');
    END LOOP;
    CLOSE c_usuarios;
END;

-- Consultas SQL Complexas (relatórios)

-- Total de alertas por tipo e cidade, mostrando só cidades com mais de 1 alerta

SELECT 
    tipo, 
    cidade, 
    COUNT(*) AS total_alertas
FROM 
    alertas
GROUP BY 
    tipo, cidade
HAVING 
    COUNT(*) > 1
ORDER BY 
    cidade, total_alertas DESC;

--  Número de alertas não visualizados por usuário e por tipo de alerta
SELECT 
    usuarios.nome, 
    alertas.tipo, 
    COUNT(*) AS alertas_nao_visualizados
FROM 
    usuarios
JOIN 
    usuario_alertas ON usuarios.id_usuario = usuario_alertas.usuario_id
JOIN 
    alertas ON usuario_alertas.alerta_id = alertas.id_alerta
WHERE 
    usuario_alertas.visualizado = 'N'
GROUP BY 
    usuarios.nome, alertas.tipo
ORDER BY 
    usuarios.nome, alertas_nao_visualizados DESC;

-- Média de alertas por cidade para cidades que possuem pelo menos 2 usuários cadastrados

SELECT 
    alertas.cidade,
    COUNT(alertas.id_alerta) AS total_alertas
FROM 
    alertas
JOIN 
    usuarios ON alertas.cidade = usuarios.cidade
GROUP BY 
    alertas.cidade
HAVING 
    COUNT(DISTINCT usuarios.id_usuario) >= 2
ORDER BY 
    total_alertas DESC;

-- Lista de usuários com o número total de alertas visualizados e não visualizados

SELECT
    usuarios.nome,
    SUM(CASE WHEN usuario_alertas.visualizado = 'S' THEN 1 ELSE 0 END) AS total_visualizados,
    SUM(CASE WHEN usuario_alertas.visualizado = 'N' THEN 1 ELSE 0 END) AS total_nao_visualizados
FROM 
    usuarios
LEFT JOIN 
    usuario_alertas ON usuarios.id_usuario = usuario_alertas.usuario_id
GROUP BY 
    usuarios.nome
ORDER BY 
    total_nao_visualizados DESC, total_visualizados DESC;

-- Usuários que possuem alertas de todos os tipos ('chuva', 'vento', 'calor') não visualizados

SELECT 
    nome
FROM 
    usuarios
WHERE 
    NOT EXISTS (
        SELECT 1 FROM (
            SELECT DISTINCT tipo FROM alertas
        ) tipos
        WHERE NOT EXISTS (
            SELECT 1 FROM usuario_alertas
            JOIN alertas ON usuario_alertas.alerta_id = alertas.id_alerta
            WHERE usuario_alertas.usuario_id = usuarios.id_usuario
              AND usuario_alertas.visualizado = 'N'
              AND alertas.tipo = tipos.tipo
        )
    )
ORDER BY nome;














